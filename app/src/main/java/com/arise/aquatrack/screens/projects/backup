//package com.arise.aquatrack.screens.projects
//
//import android.widget.Toast
//import androidx.compose.foundation.layout.*
//import androidx.compose.foundation.lazy.LazyColumn
//import androidx.compose.foundation.lazy.items
//import androidx.compose.material.icons.Icons
//import androidx.compose.material.icons.filled.Add
//import androidx.compose.material3.*
//import androidx.compose.runtime.*
//import androidx.compose.ui.Modifier
//import androidx.compose.ui.graphics.Color
//import androidx.compose.ui.platform.LocalContext
//import androidx.compose.ui.unit.dp
//import androidx.navigation.NavController
//import com.arise.aquatrack.model.Project
//import com.arise.aquatrack.firebase.FirestoreService
//import com.arise.aquatrack.ui.components.AddProjectDialog
//import com.arise.aquatrack.ui.components.EditProjectDialog
//import com.arise.aquatrack.ui.components.ProjectCard
//import com.arise.aquatrack.ui.theme.DeepBlue
//
//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun ProjectsScreen(navController: NavController) {
//    val context = LocalContext.current
//    var projects by remember { mutableStateOf(listOf<Project>()) }
//    var showAddDialog by remember { mutableStateOf(false) }
//    var editingProject by remember { mutableStateOf<Project?>(null) }
//
//    // Load projects from Firestore
//    LaunchedEffect(Unit) {
//        FirestoreService.getProjects(
//            onComplete = { projects = it },
//            onError = {
//                Toast.makeText(context, "Failed to load: ${it.message}", Toast.LENGTH_LONG).show()
//            }
//        )
//    }
//
//    Scaffold(
//        topBar = {
//            TopAppBar(
//                title = { Text("Projects", color = Color.White) },
//                colors = TopAppBarDefaults.topAppBarColors(
//                    containerColor = DeepBlue
//                )
//            )
//        },
//        floatingActionButton = {
//            FloatingActionButton(
//                onClick = { showAddDialog = true },
//                containerColor = DeepBlue
//            ) {
//                Icon(Icons.Default.Add, contentDescription = "Add Project", tint = Color.White)
//            }
//        },
//        content = { padding ->
//            LazyColumn(
//                modifier = Modifier
//                    .fillMaxSize()
//                    .padding(padding)
//                    .padding(16.dp),
//                verticalArrangement = Arrangement.spacedBy(12.dp)
//            ) {
//                items(projects) { project ->
//                    ProjectCard(
//                        project = project,
//                        onEditClick = { editingProject = it },
////                        onDeleteClick = {
////                            FirestoreService.deleteProject(it.id,
////                                onSuccess = {
////                                    Toast.makeText(context, "Deleted", Toast.LENGTH_SHORT).show()
////                                    FirestoreService.getProjects(
////                                        onComplete = { projects = it },
////                                        onError = {}
////                                    )
////                                },
////                                onFailure = {
////                                    Toast.makeText(context, "Delete failed: ${it.message}", Toast.LENGTH_SHORT).show()
////                                }
////                            )
////                        }
//                        onDeleteClick = {
//                            val id = it.id
//                            if (!id.isNullOrBlank()) {
//                                FirestoreService.deleteProject(
//                                    id,
//                                    onSuccess = {
//                                        Toast.makeText(context, "Deleted", Toast.LENGTH_SHORT).show()
//                                        FirestoreService.getProjects(
//                                            onComplete = { projects = it },
//                                            onError = {}
//                                        )
//                                    },
//                                    onFailure = {
//                                        Toast.makeText(context, "Delete failed: ${it.message}", Toast.LENGTH_SHORT).show()
//                                    }
//                                )
//                            } else {
//                                Toast.makeText(context, "Invalid project ID", Toast.LENGTH_SHORT).show()
//                            }
//                        }
//
//                    )
//                }
//            }
//        }
//    )
//
//    // Add Project Dialog
//    if (showAddDialog) {
//        AddProjectDialog(
//            onDismiss = { showAddDialog = false },
//            onAddProject = { newProject ->
//                FirestoreService.addProject(
//                    newProject,
//                    onSuccess = {
//                        Toast.makeText(context, "Project Added", Toast.LENGTH_SHORT).show()
//                        FirestoreService.getProjects(
//                            onComplete = { projects = it },
//                            onError = {}
//                        )
//                        showAddDialog = false
//                    },
//                    onFailure = {
//                        Toast.makeText(context, "Failed to add: ${it.message}", Toast.LENGTH_SHORT).show()
//                    }
//                )
//            }
//        )
//    }
//
//    // Edit Project Dialog
//    editingProject?.let { projectToEdit ->
//        EditProjectDialog(
//            project = projectToEdit,
//            onDismiss = { editingProject = null },
//            onUpdateProject = { updatedProject ->
//                FirestoreService.updateProject(
//                    updatedProject,
//                    onSuccess = {
//                        Toast.makeText(context, "Project Updated", Toast.LENGTH_SHORT).show()
//                        FirestoreService.getProjects(
//                            onComplete = { projects = it },
//                            onError = {}
//                        )
//                        editingProject = null
//                    },
//                    onFailure = {
//                        Toast.makeText(context, "Update failed: ${it.message}", Toast.LENGTH_SHORT).show()
//                    }
//                )
//            }
//        )
//    }
//}